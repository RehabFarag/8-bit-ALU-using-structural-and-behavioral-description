module Logic #(parameter N = 8)(
				input wire [N-1:0] A,
				input wire [N-1:0] B,
				input wire s2, 
				input wire s3,
				output reg [N-1:0] RL
				);
				
	localparam AND = 2'b00, XOR = 2'b01, OR = 2'b10, ONE_S = 2'b11;
	
	wire [N-1:0] RL_and, RL_xor, RL_or;
	
	assign RL = ({s2,s3} == AND) ?  	RL_and : ({s2,s3} == XOR) ? RL_xor :
	({s2,s3} == OR) ? RL_or : ({s2,s3} == ONE_S) ? ~B : {N}'bx;
	
	andGate g1(.out(RL_and), .in1(A), .in2(B));
	xorGate g2(.out(RL_xor), .in1(A), .in2(B));
	orGate g3(.out(RL_or), .in1(A), .in2(B));
//	Adder_subtractor AS1(0, B, 1, RL_twos, c);
//	Adder_subtractor AS2(B, 1, 1, RL_ones, c);
	
endmodule
	